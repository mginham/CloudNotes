name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-deploy-test:
    runs-on: ubuntu-latest

    env:
      CLUSTER_NAME: kind
      KIND_CLUSTER_NAME: kind
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Docker Buildx for advanced build capabilities
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      # Install kind (Kubernetes in Docker)
      - name: Install kind
        uses: helm/kind-action@v1
        with:
          cluster_name: ${{ env.KIND_CLUSTER_NAME }}

      # Install ingress-nginx controller for kind cluster
      - name: Install ingress-nginx for kind
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml

      # Wait for ingress-nginx controller to be ready
      # Removed unreliable wait for admission webhook job pods
      - name: Wait for ingress-nginx controller to be ready
        run: kubectl wait --namespace ingress-nginx \
              --for=condition=available deployment/ingress-nginx-controller \
              --timeout=180s

      # Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/my-app:latest .
          docker push ${{ env.DOCKERHUB_USERNAME }}/my-app:latest

      # Deploy application to the kind cluster
      - name: Deploy application
        run: kubectl apply -f k8s/

      # Wait for application pods to be ready
      - name: Wait for application pods
        run: kubectl wait --for=condition=ready pod -l app=my-app --timeout=180s

      # Verify ingress is serving traffic before tests
      - name: Check ingress endpoint
        run: |
          echo "Waiting for ingress to respond..."
          for i in {1..10}; do
            if curl -sSf http://localhost/healthz > /dev/null; then
              echo "Ingress is responding"
              exit 0
            fi
            echo "Still waiting..."
            sleep 5
          done
          echo "ERROR: Ingress endpoint not responding"
          exit 1

      # Run integration tests
      - name: Run tests
        run: npm install && npm test