name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-deploy-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx for multi-platform builds and caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to DockerHub using GitHub secrets
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push backend image with both commit SHA and latest tags
      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }} -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

      # Build and push frontend image with both commit SHA and latest tags
      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }} -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      # Install kind (Kubernetes in Docker) for local testing
      - name: Install kind
        uses: helm/kind-action@v1
        with:
          config: kind-config.yaml

      # Load the locally built Docker images into kind cluster
      - name: Load Docker images into kind
        run: |
          kind load docker-image ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}
          kind load docker-image ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

      # Install ingress-nginx controller into the cluster
      - name: Set up ingress-nginx
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml

      # Wait for ingress-nginx controller deployment to be ready
      # Includes retry loop for better reliability in CI environments
      - name: Wait for ingress-nginx controller to be ready
        run: |
          echo "Waiting for ingress-nginx-controller to be ready..."
          for i in {1..30}; do
            if kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx --timeout=10s; then
              echo "Ingress-nginx controller is ready."
              exit 0
            fi
            echo "Retrying in 10s..."
            sleep 10
          done
          echo "ERROR: ingress-nginx-controller failed to become ready in time."
          kubectl describe deployment/ingress-nginx-controller -n ingress-nginx
          kubectl get pods -n ingress-nginx -o wide
          exit 1

      # Install cert-manager CRDs before applying manifests that depend on them
      - name: Install cert-manager CRDs
        run: |
          kubectl apply --validate=false -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.3/cert-manager.crds.yaml

      # Apply Kubernetes manifests for backend, frontend, and supporting resources
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/

      # Wait for backend deployment rollout to complete
      - name: Wait for backend to be ready
        run: |
          kubectl rollout status deployment/backend-deployment --timeout=180s

      # Wait for frontend deployment rollout to complete
      - name: Wait for frontend to be ready
        run: |
          kubectl rollout status deployment/frontend-deployment --timeout=180s

      # Smoke test to verify frontend responds (adjust URL/path as needed)
      - name: Run smoke tests
        run: |
          kubectl port-forward service/frontend-service 8080:80 &
          sleep 5
          curl -f http://localhost:8080 || (echo "Smoke test failed" && exit 1)

      # Clean up the kind cluster after tests
      - name: Delete kind cluster
        if: always()
        run: kind delete cluster